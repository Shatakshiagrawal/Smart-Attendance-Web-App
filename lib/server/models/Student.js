import mongoose from 'mongoose';
import bcrypt from 'bcryptjs';

const studentSchema = new mongoose.Schema({
    name: { type: String, required: true },
    enrollmentNo: { type: String, required: true, unique: true }, // e.g., University Enrollment No.
    email: { type: String, required: true, unique: true },
    password: { type: String, required: true },
    // The student's current semester.
    // The specific classes a student is enrolled in are managed from the 'Class' model.
    currentSemester: {
        type: Number,
        required: true
    },
    // --- Device Binding for Proxy Prevention ---
    // This field will store a unique ID generated by the student's device.
    // It's set once on the first successful login and is required for all future attendance marking.
    deviceIdentifier: {
        type: String,
        unique: true,
        sparse: true // Allows multiple students to not have an identifier, but ensures the ones that do are unique.
    }
}, { timestamps: true });

// Hash password before saving
studentSchema.pre('save', async function (next) {
    if (!this.isModified('password')) return next();
    const salt = await bcrypt.genSalt(10);
    this.password = await bcrypt.hash(this.password, salt);
    next();
});

// Method to compare passwords for login
studentSchema.methods.matchPassword = async function (enteredPassword) {
    return await bcrypt.compare(enteredPassword, this.password);
};

const Student = mongoose.model('Student', studentSchema);
export default Student;

